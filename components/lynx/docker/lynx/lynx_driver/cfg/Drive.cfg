#!/usr/bin/env python
PACKAGE = "lynx_driver"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


gen.add("enable_pid", bool_t, 0, "", True)


# 
# Steering
# 
gen.add("steering_zero_pwm", double_t, 0, "Zero angle steering PWM value",    1500, 0, 2500)
gen.add("steering_angle_min", double_t, 0, "Degrees",    -10, -100, 100)
gen.add("steering_angle_max", double_t, 0, "Degrees",    10, -100, 100)
gen.add("steering_min_pwm", double_t, 0, "Minimum PWM",    1200, 500, 2500)
gen.add("steering_max_pwm", double_t, 0, "Maximum PWM",    1800, 500, 2500)

# 
# Drive
# 
gen.add("throttle_zero_pwm", double_t, 0, "Zero throttle command PWM value", 1500, 0, 2500)
gen.add("throttle_min_dac_value", int_t, 0, "analogWrite() value to set ~0.8V to throttle DAC pin", 504, 0, 4095)
gen.add("throttle_deadzone", double_t, 0, "Threshold around zero PWM value", 30, 0, 2500)

#
# Breaks
#
gen.add("breaks_front_on_pwm", double_t, 0, "Breaks servo PWM value when pressed",    1300, 0, 2500)
gen.add("breaks_front_off_pwm", double_t, 0, "Breaks servo pwm value when released",  2500, 0, 2500)
gen.add("breaks_rear_on_pwm", double_t, 0, "Breaks servo PWM value when pressed",    1700, 0, 2500)
gen.add("breaks_rear_off_pwm", double_t, 0, "Breaks servo pwm value when released",  500, 0, 2500)

#
# Odometry
#
gen.add("tick_to_m", double_t, 0, "Tick to meter ratio", 0.004508566, -1000, 1000)

exit(gen.generate(PACKAGE, "lynx_driver", "Drive"))


