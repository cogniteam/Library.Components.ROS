{
  "name": "nimbus/turtlebot3-gmapping",
  "type": "COMPONENT_TYPE_COMPONENT",
  "className": "Ros1Component",
  "instanceName": "",
  "description": "turtlebot3 gmapping algorithm.\nLicense: Apache 2.0",
  "version": {
    "major": 1,
    "minor": 0,
    "patch": 0,
    "build": ""
  },
  "start": "START_MODE_AUTO",
  "environment": {
    "name": "",
    "ipAddress": "",
    "state": "ENVIRONMENT_STATE_UNLOADED",
    "message": "",
    "progress": 0,
    "requiredDevices": [],
    "ports": [],
    "hostIpAddress": "",
    "variables": [],
    "dockerInfo": {
      "image": "cognimbus/turtlebot3-wafflepi",
      "containerId": "",
      "imageSize": 0,
      "commands": [
        "roslaunch",
        "turtlebot3_slam",
        "turtlebot3_gmapping.launch",
        "model:=${model}",
        "--screen"
      ],
      "privileged": false,
      "gpu": false,
      "networkHost": false,
      "binds": []
    },
    "log": "",
    "convertedCommands": "",
    "onExit": "IGNORE"
  },
  "parameters": {
    "parameters": [
      {
        "name": "model",
        "description": "The model type. Can be: burger, waffle, or waffle pi.",
        "Category": "Static",
        "node": "",
        "stringValue": "waffle_pi"
      }
    ]
  },
  "state": "COMPONENT_STATE_UNLOADED",
  "message": "",
  "streams": {
    "inputStreams": [
      {
        "name": "scan",
        "type": "",
        "description": "Publishes scan data from the laser scanner.",
        "streamMode": "STREAM_MODE_TOPIC",
        "rosTopic": {
          "topic": "/scan",
          "type": "Messages.sensor_msgs.LaserScan",
          "qosProfile": ""
        },
        "latched": false,
        "maxRate": 0,
        "expectedRate": 0
      },
      {
        "name": "odom",
        "type": "Nimbus.Messages.nav_msgs.Odometry",
        "description": "2D pose (used by wheel odometry): The 2D pose contains the position and orientation of the robot in the ground plane and the covariance on this pose. The message to send this 2D pose actually represents a 3D pose, but the z, roll and pitch are simply ignored.",
        "streamMode": "STREAM_MODE_TOPIC",
        "rosTf": {
          "baseFrame": "odom",
          "childFrame": "base_footprint",
          "rate": 10,
          "qosProfile": ""
        },
        "latched": false,
        "maxRate": 0,
        "expectedRate": 0
      }
    ],
    "outputStreams": [
      {
        "name": "map",
        "type": "",
        "description": "Get the map data from this topic, which is latched, and updated periodically.",
        "streamMode": "STREAM_MODE_TOPIC",
        "rosTopic": {
          "topic": "/map",
          "type": "Messages.nav_msgs.OccupancyGrid",
          "qosProfile": ""
        },
        "latched": false,
        "maxRate": 0,
        "expectedRate": 0
      },
      {
        "name": "robot_pose",
        "type": "Messages.geometry_msgs.Pose",
        "description": "TF from map to base_footprint. Represents the robot position on the map.",
        "streamMode": "STREAM_MODE_TOPIC",
        "rosTf": {
          "baseFrame": "map",
          "childFrame": "base_footprint",
          "rate": 10,
          "qosProfile": ""
        },
        "latched": false,
        "maxRate": 0,
        "expectedRate": 0
      },
      {
        "name": "map_odom",
        "type": "Nimbus.Messages.nav_msgs.Odometry",
        "description": "TF from map to odometry.",
        "streamMode": "STREAM_MODE_TOPIC",
        "rosTf": {
          "baseFrame": "map",
          "childFrame": "odom",
          "rate": 10,
          "qosProfile": ""
        },
        "latched": false,
        "maxRate": 0,
        "expectedRate": 0
      }
    ]
  },
  "requiredDevices": [],
  "ros": {
    "baseFrame": "base_footprint",
    "rate": 10,
    "publishTfDevices": true,
    "rosMasterUri": "",
    "rosIp": "",
    "autoDetectIp": false
  },
  "tags": {},
  "category": "Algorithms/SLAM 2D",
  "simulation": false,
  "pluginFile": "",
  "license": "Apache 2.0",
  "id": ""
}
